package ru.nt202.smiles2048.view;import android.animation.Animator;import android.animation.AnimatorListenerAdapter;import android.animation.AnimatorSet;import android.animation.ObjectAnimator;import android.app.Activity;import android.content.Context;import android.content.res.Resources;import android.view.View;import android.widget.ImageView;import ru.nt202.smiles2048.R;import ru.nt202.smiles2048.utils.Display;import static ru.nt202.smiles2048.utils.AppConfig.DURATION_APPEAR;import static ru.nt202.smiles2048.utils.AppConfig.DURATION_FADE;import static ru.nt202.smiles2048.utils.AppConfig.DURATION_MOVE;public class Smile {    private static final String TAG = Smile.class.getSimpleName();    private static int STEP;    private Context context;    private static Resources resources;    private ImageView ivStandard, ivAppear;    private int squareNumber;    private int currentName, currentRow, currentColumn;    private int destinationName, destinationRow, destinationColumn;    private boolean isMovable;    private boolean isBlast;    private boolean isFade;    private boolean isAppear;    private int appearDestinationName, appearDestinationColumn, appearDestinationRow;    void setContext(Context context) {        this.context = context;        if (resources == null) {            resources = context.getResources(); // init resources        }        STEP = Display.getWidth(context) / 4 - 2;    }    public void setSquareNumber(int squareNumber) {        this.squareNumber = squareNumber;    }    public void setCurrentName(int currentName) {        this.currentName = currentName;    }    public void setCurrentRow(int currentRow) {        this.currentRow = currentRow;    }    public void setCurrentColumn(int currentColumn) {        this.currentColumn = currentColumn;    }    public void setDestinationName(int destinationName) {        this.destinationName = destinationName;    }    public void setDestinationRow(int destinationRow) {        this.destinationRow = destinationRow;    }    public void setDestinationColumn(int destinationColumn) {        this.destinationColumn = destinationColumn;    }    public void setMovable(boolean movable) {        isMovable = movable;    }    public void setBlast(boolean blast) {        isBlast = blast;    }    public void setFade(boolean fade) {        isFade = fade;    }    public void setAppear(boolean appear) {        isAppear = appear;    }    public void setAppearDestinationName(int appearDestinationName) {        this.appearDestinationName = appearDestinationName;    }    public void setAppearDestinationColumn(int appearDestinationColumn) {        this.appearDestinationColumn = appearDestinationColumn;    }    public void setAppearDestinationRow(int appearDestinationRow) {        this.appearDestinationRow = appearDestinationRow;    }    void animate() {        if (context != null) {            initImageView();            insertSmile(ivStandard, currentName);            // MOVE:            ObjectAnimator animationMove = null;            if (isMovable) {                if (currentColumn != destinationColumn) {                    animationMove = ObjectAnimator.ofFloat(ivStandard, "x", destinationColumn * STEP);                } else if (currentRow != destinationRow) {                    animationMove = ObjectAnimator.ofFloat(ivStandard, "y", destinationRow * STEP);                }                if (animationMove != null) {                    animationMove.setDuration(DURATION_MOVE);                    animationMove.addListener(new AnimatorListenerAdapter() {                        @Override                        public void onAnimationEnd(Animator animation) {                            if (isBlast) {                                ObjectAnimator animationBurnX = ObjectAnimator.ofFloat(ivStandard, "ScaleX", 1.1f);                                ObjectAnimator animationBurnY = ObjectAnimator.ofFloat(ivStandard, "ScaleY", 1.1f);                                AnimatorSet animatorSet = new AnimatorSet();                                ivStandard.setImageResource(R.drawable.ic_fire);                                animatorSet.setDuration(100);                                animatorSet.playTogether(animationBurnX, animationBurnY);                                animatorSet.start();                                animatorSet.addListener(new AnimatorListenerAdapter() {                                    @Override                                    public void onAnimationEnd(Animator animation) {                                        insertSmile(ivStandard, destinationName);                                        ObjectAnimator animationReturnX = ObjectAnimator.ofFloat(ivStandard, "ScaleX", 1f);                                        ObjectAnimator animationReturnY = ObjectAnimator.ofFloat(ivStandard, "ScaleY", 1f);                                        AnimatorSet animatorSet = new AnimatorSet();                                        animatorSet.setDuration(100);                                        animatorSet.playTogether(animationReturnX, animationReturnY);                                        animatorSet.start();                                    }                                });                            } else {                                insertSmile(ivStandard, destinationName);                            }                        }                    });                    animationMove.start();                }            }            // FADE:            ObjectAnimator animationFade = null;            if (isFade) {                insertSmile(ivStandard, currentName);                animationFade = ObjectAnimator.ofFloat(ivStandard, View.ALPHA, 1.0f, 0.0f);                animationFade.setDuration(DURATION_FADE);                animationFade.start();            }            // APPEAR:            ObjectAnimator animationAppear = null;            if (isAppear) {                insertSmile(ivAppear, appearDestinationName);                animationAppear = ObjectAnimator.ofFloat(ivAppear, View.ALPHA, -100f, 1.0f);                animationAppear.setDuration(DURATION_APPEAR);                animationAppear.addListener(new AnimatorListenerAdapter() {                    @Override                    public void onAnimationEnd(Animator animation) {                        ObjectAnimator animationIncreaseX = ObjectAnimator.ofFloat(ivAppear, "ScaleX", 1.2f);                        ObjectAnimator animationIncreaseY = ObjectAnimator.ofFloat(ivAppear, "ScaleY", 1.2f);                        AnimatorSet animatorSet = new AnimatorSet();                        animatorSet.setDuration(100);                        animatorSet.playTogether(animationIncreaseX, animationIncreaseY);                        animatorSet.addListener(new AnimatorListenerAdapter() {                            @Override                            public void onAnimationEnd(Animator animation) {                                ObjectAnimator animationDecreaseX = ObjectAnimator.ofFloat(ivAppear, "ScaleX", 1f);                                ObjectAnimator animationDecreaseY = ObjectAnimator.ofFloat(ivAppear, "ScaleY", 1f);                                AnimatorSet animatorSet = new AnimatorSet();                                animatorSet.setDuration(100);                                animatorSet.playTogether(animationDecreaseX, animationDecreaseY);                                animatorSet.start();                            }                        });                        animatorSet.start();                    }                });                animationAppear.start();            }        }    }    private void initImageView() {        // ivStandard - ImageView        if (ivStandard != null) {            ivStandard.getLayoutParams().height = STEP;            ivStandard.getLayoutParams().width = STEP;            ivStandard.setX(currentColumn * STEP);            ivStandard.setY(currentRow * STEP);            if (currentName == 0) {                ivStandard.setVisibility(View.INVISIBLE);            } else {                ivStandard.setAlpha(1.0f);                ivStandard.setVisibility(View.VISIBLE);            }        } else {            int ivId = resources.getIdentifier("square" + squareNumber, "id", context.getPackageName());            ivStandard = ((Activity) context).getWindow().findViewById(ivId);        }        // ivAppear - ImageView        if (ivAppear != null) {            if (isAppear) {                ivAppear.getLayoutParams().height = STEP;                ivAppear.getLayoutParams().width = STEP;                ivAppear.setX(appearDestinationColumn * STEP);                ivAppear.setY(appearDestinationRow * STEP);                ivAppear.setVisibility(View.VISIBLE); // always visible            }        } else {            int ivId = resources.getIdentifier("squareA", "id", context.getPackageName());            ivAppear = ((Activity) context).getWindow().findViewById(ivId);        }    }    private void insertSmile(ImageView imageView, int smileName) {        int smileId = resources.getIdentifier("ic_" + smileName, "drawable", context.getPackageName());        imageView.setImageResource(smileId);    }    @Override    public String toString() {        return "Smile{" +                "isMov=" + isMovable +                ", isF=" + isFade +                ", isAp=" + isAppear +                ", curName='" + currentName + '\'' +                ", curRow=" + currentRow +                ", curCol=" + currentColumn +                ", desName='" + destinationName + '\'' +                ", desRow=" + destinationRow +                ", desCol=" + destinationColumn +                ", apName='" + appearDestinationName + '\'' +                ", apRow=" + appearDestinationRow +                ", apCol=" + appearDestinationColumn +                '}';    }}